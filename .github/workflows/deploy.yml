name: MSK & RDS Provision

on:
  push:
    branches: [dev, staging, main]

env:
  AWS_REGION: eu-north-1
  SECRET_ID: msk-client-cert

jobs:
  provision-msk:
    runs-on: self-hosted
    environment:
      name: ${{ github.ref_name }}
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Setup AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Install Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.5.7

      - name: Terraform Init & Apply (MSK)
        run: |
          echo ${{ github.ref_name }}
          cd terraform-msk/${{ github.ref_name }}
          terraform init \
            -backend-config="bucket=terraformstatee" \
            -backend-config="key=msk/${{ github.ref_name }}/terraform.tfstate" \
            -backend-config="region=eu-north-1"
          terraform apply -auto-approve
      - name: Debug Terraform Output
        run: |
          cd terraform-msk/${{ github.ref_name }}
          terraform output    

      - name: Export Bootstrap Server Output
        id: tf-output
        run: |
          cd terraform-msk/${{ github.ref_name }}
          BOOTSTRAP=$(terraform output bootstrap_server | tr -d '\r' | tr -d '"')
          echo "Bootstrap Server: $BOOTSTRAP"
          echo "BOOTSTRAP_SERVER<<EOF" >> $GITHUB_ENV
          echo "$BOOTSTRAP" >> $GITHUB_ENV
          echo "EOF" >> $GITHUB_ENV

  apply-k8s-operator:
    needs: provision-msk
    runs-on: self-hosted
    environment:
      name: ${{ github.ref_name }}
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Setup AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Update kubeconfig for EKS
        run: |
          aws eks update-kubeconfig \
            --region eu-north-1 \
            --name kafka-cluster

      - name: Create Kafka TLS Secret from AWS Secrets Manager
        run: |
          SECRET=$(aws secretsmanager get-secret-value \
            --secret-id $SECRET_ID \
            --region $AWS_REGION \
            --query SecretString \
            --output text)

          CERT=$(echo "$SECRET" | jq -r '."client.crt"' | sed 's/\\n/\n/g')
          KEY=$(echo "$SECRET" | jq -r '."client.key"' | sed 's/\\n/\n/g')
          CA=$(echo "$SECRET"  | jq -r '."ca.pem"'     | sed 's/\\n/\n/g')

          if [[ "$CERT" == "null" || "$KEY" == "null" || "$CA" == "null" ]]; then
            echo " One or more cert fields in AWS Secrets Manager are missing or null!"
            exit 1
          fi

          echo "$CERT" > client.crt
          echo "$KEY"  > client.key
          echo "$CA"   > ca.pem

          cat <<EOF > client.properties
          security.protocol=SSL
          ssl.ca.location=/etc/kafka/secrets/ca.pem
          ssl.certificate.location=/etc/kafka/secrets/client.crt
          ssl.key.location=/etc/kafka/secrets/client.key
          EOF

          kubectl create secret generic kafka-client-cert \
            --namespace kafka \
            --from-file=ca.pem \
            --from-file=client.crt \
            --from-file=client.key \
            --from-file=client.properties \
            --dry-run=client -o yaml | kubectl apply -f -

      - name: Generate Kafka ConfigMap
        run: |
          mkdir -p k8s/operator
          cat <<EOF > k8s/operator/kafka-config.yaml
          apiVersion: v1
          kind: ConfigMap
          metadata:
          name: kafka-config
          namespace: kafka
          labels:
          app: kafka-operator
          data:
          BOOTSTRAP_SERVER: "${{ env.BOOTSTRAP_SERVER }}"
          EOF

      - name: Apply Kafka Operator Resources
        run: |
          kubectl apply -f k8s/operator/kafka-acl-crd.yaml --validate=false
          kubectl apply -f k8s/operator/kafka-topic-crds.yaml --validate=false
          kubectl apply -f k8s/operator/kafka-topic-operator.yaml --validate=false

      - name: Apply Kafka Topics and ACLs
        run: |
          kubectl apply -f k8s/topics/
          
  setup-aws-eks:
    name: Setup AWS and EKS
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v3
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Install kubectl
        uses: azure/setup-kubectl@v4
        with:
          version: 'latest'

      - name: Setup kubeconfig for EKS
        run: |
          aws eks update-kubeconfig --name kafka-cluster --region $AWS_REGION
          mkdir -p $HOME/.kube
          cp ~/.kube/config kubeconfig
          
      - name: Save kubeconfig as artifact
        uses: actions/upload-artifact@v4
        with:
          name: kubeconfig
          path: kubeconfig

  apply-terraform-job:
    name: Apply Terraform Kubernetes Job
    runs-on: ubuntu-latest
    needs: setup-aws-eks

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v3
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Download kubeconfig artifact
        uses: actions/download-artifact@v4
        with:
          name: kubeconfig
          path: ~/.kube

      - name: Set KUBECONFIG environment variable
        run: echo "KUBECONFIG=$HOME/.kube/kubeconfig" >> $GITHUB_ENV

      - name: Create AWS Secret in Kubernetes
        run: |
          kubectl delete secret aws-credentials --ignore-not-found
          kubectl create secret generic aws-credentials \
            --from-literal=aws_access_key_id=${{ secrets.AWS_ACCESS_KEY_ID }} \
            --from-literal=aws_secret_access_key=${{ secrets.AWS_SECRET_ACCESS_KEY }}

      - name: Delete existing Job (if any)
        run: |
          kubectl delete job terraform-rds-secret-job || true

      - name: Apply Terraform Kubernetes Job
        run: |
          kubectl apply -f k8s/rds-service-account.yaml
          kubectl apply -f k8s/rds-config-map.yaml
          kubectl apply -f k8s/terraform-rds-secret-job.yaml
          kubectl get all

      - name: Wait for Job completion
        run: |
          kubectl wait --for=condition=complete --timeout=2400s job/terraform-rds-secret-job

      - name: Get logs from Job
        run: |
          POD_NAME=$(kubectl get pods --selector=job-name=terraform-rds-secret-job -o jsonpath='{.items[0].metadata.name}')
          kubectl logs $POD_NAME
